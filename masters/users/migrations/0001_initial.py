# Generated by Django 5.2.1 on 2025-05-22 14:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import utils.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
        ('services', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('custom_profession', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Yalnız Azərbaycan hərfləri ilə yazılmalıdır.', regex='^[a-zA-ZəƏöÖüÜşŞçÇğĞıİ\\s]+$')])),
                ('education_detail', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Yalnız Azərbaycan hərfləri ilə yazılmalıdır.', regex='^[a-zA-ZəƏöÖüÜşŞçÇğĞıİ\\s]+$')])),
                ('full_name', models.CharField(max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Yalnız Azərbaycan hərfləri ilə yazılmalıdır.', regex='^[a-zA-ZəƏöÖüÜşŞçÇğĞıİ\\s]+$')], verbose_name='Ad və soyad')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('birthday', models.DateField(null=True, validators=[utils.validators.validate_birthday])),
                ('phone_number', models.CharField(max_length=13, null=True, validators=[django.core.validators.RegexValidator(message='Mobil nömrə düzgün daxil edilməyib. 50 123 45 67 formatında daxil edin.', regex='^(\\+994)(50|51|55|70|77|99)[0-9]{7}$')], verbose_name='Mobil nömrə')),
                ('gender', models.CharField(choices=[('man', 'Kişi'), ('woman', 'Qadın')], max_length=5, null=True, verbose_name='Cinsiyyət')),
                ('is_active_on_main_page', models.BooleanField(default=True)),
                ('note', models.CharField(max_length=1500, null=True, verbose_name='Qeyd')),
                ('experience', models.PositiveSmallIntegerField()),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('instagram_url', models.URLField(blank=True, null=True)),
                ('tiktok_url', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('youtube_url', models.URLField(blank=True, null=True)),
                ('cities', models.ManyToManyField(related_name='city_masters', to='core.city', verbose_name='Şəhərlər')),
                ('districts', models.ManyToManyField(blank=True, related_name='district_masters', to='core.district')),
                ('education', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='education_masters', to='core.education')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('languages', models.ManyToManyField(related_name='language_masters', to='core.language', verbose_name='Dillər')),
                ('profession_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category_masters', to='services.category')),
                ('profession_service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profession_masters', to='services.servicetemplate')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MasterWorkImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='master_handwork_images/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
    ]
